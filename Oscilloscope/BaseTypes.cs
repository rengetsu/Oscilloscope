using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Oscilloscope
{
    public class BaseTypes
    {
        ///  Constant values
        public const double cADC_Period = 200E-12;      ///  200 ps ADC Period One Channel
        public const double cFIP_Period = 3200E-12;     ///  3.2 ns Fine Interpolator Period

        //     В приборе имеются два цифровых интерполятора и плавный интерполятор.
        //
        //     Первым работает плавный интерполятор. Он меряет расстояние от точки триггера
        //  до второго такта 1 ГГц клока (так называемого опорного такта). Это время
        //  теоретически меняется от 1 нс до 2 нс.
        //
        //     Первый цифровой интерполятор меряет число тактов 1 ГГц клока между опорным
        //  тактом и концом пачки из 8 точек АЦП. Может принимать значения 0..7, 0..15,
        //  0..31 и 0..63 для режимов 8 и 12 бит и коэффициентах децимации 1:1, 1:2 и 1:4.
        //  Старшая часть обрабатывается в приборе, отбрасывая ненужные точки. А вом
        //  младшая при коэффициентах децимации 1:2 и 1:4 (на 8 битах) и 1:1, 1:2 и 1:4
        //  для 12 битаз дает расстояние в тактах 1 ГГц клока между опорным тактом и
        //  ближайшей к нему выборкрй АЦП. При коэффициенте децимации 1:1 на 8 битах
        //  (АЦП работают на частоте 1 ГГц!) интерполятор полностью обрабатывается в
        //  приборе, и в верхней программе не используется.
        //
        //    Второй цифровой интерполятор работает при коэффициенте децимации 1:10 и далее.
        //  Он показывает расстояние в выборках АЦП между опорным тактом и концом пачки
        //  из 8 точек АЦП. Обрабатывается в приборе, отбрасывая ненужные точки.


        //  Спец. коды будут передаваться 2-мя словами (или тремя и более), первым из которых будет "ключ" 0000.
        //  Далее следует слово команды, за которым (для определенных команд) - одно или несколько слов данных
        //
        // Список команд:         (взял значения из статьи википедии про код Хэмминга)
        //               (след. коды будут 2727; 2C2C; 3131; 3A3A; 4545; 4E4E; 5353; 5858; 6262; 6969; 7474 и 7F7F)

        /// SPECIAL CODES
        /// 

        /// SpecCode_FR_FineInterpolator
        /// В следующем 16-битном слове MMMM  будет передано значение плавного интерполятора.
        /// Слово MMMM - код плавного интерполятора. Это напрямую код интерполятора,
        /// приведенный к 16-битному коду. 0=0 Вольт; 65536=3.3 Вольта.
        /// Однако если триггер флаг отсутствовал - то Слово MMMM будет иметь
        /// значение SpecCode_NotTriggerFlag!!!
        /// Этот спецкод передается в начале сигнала RT.
        ///  Для Random-сигнала (в одном сборе может "упаковываться" несколько сборов,
        ///  в зависимости от длины каждого сбора и длины буфера, а также общим временем,
        ///  выделенным на 1 сбор). Таким образом, сигнал может состоять из нескольких "кусков".
        ///  структура блока данных будет в этом случае состояь из:
        ///   - SpecCode_Key;
        ///   - блок кодов интерполятора 1-го куска;
        ///   - коды точек 1-го куска;
        ///   - SpecCode_Key;
        ///   - блок кодов интерполятора 2-го куска;
        ///   - коды точек 2-го куска;
        ///   - .......................
        ///   - .......................
        ///   - SpecCode_Key;
        ///   - блок кодов интерполятора n-го куска;
        ///   - коды точек n-го куска;
        ///   - блок кодов команды окончания сигнала;

        public const int SpecCode_FR_FineInterpolator = 0x1D2C;

        ///  SpecCode_NotTriggerFlag
        ///  Применяется в слове MMMM (код плавного интерполятора)
        ///  65535  (данных не имеет)
        ///  команд SpecCode_Interpolator или SpecCode_FR_FineInterpolator
        public const int SpecCode_NotTriggerFlag = 0xFFFF;

        /// <summary>
        /// Get ADC Period
        /// </summary>
        /// <returns>Returns ADC Period</returns>
        public double GetADC_Period()
        {
            double ADC_Period = cADC_Period;
            return ADC_Period;
        }

        /// <summary>
        /// Get FIP Period
        /// </summary>
        /// <returns>Returns FIP Period</returns>
        public double GetFIP_Period()
        {
            double FIP_Period = cFIP_Period;
            return FIP_Period;
        }

        /// <summary>
        /// Get Special Code - Not Trigger Flag
        /// </summary>
        /// <returns></returns>
        public int GetSpecCode_NotTriggerFlag()
        {
            int NotTriggerFlag = SpecCode_NotTriggerFlag;
            return NotTriggerFlag;
        }
    }
}
